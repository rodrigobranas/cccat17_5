UC5 - AcceptRide OK

Ator: Motorista
Input: ride_id, driver_id (account_id)
Output: void

Regras:

deve verificar se o account_id tem is_driver true
deve verificar se o status da corrida é "requested", se não for, lançar um erro
deve verificar se o motorista já tem outra corrida com status "accepted" ou "in_progress", se tiver lançar um erro
deve associar o driver_id na corrida
deve mudar o status para "accepted"


UC6 - StartRide OK

Ator: Motorista
Input: ride_id
Output: void

Regras:


Deve verificar se a corrida está em status "accepted", se não estiver lançar um erro
Deve modificar o status da corrida para "in_progress"

UC7 - UpdatePosition OK
Ator: Sistema
Input: ride_id, lat, long
Output: void

Deve verificar se a corrida está em status "in_progress", se não estiver lançar um erro
Deve gerar o position_id
Deve salvar na tabela position: position_id, ride_id, lat, long e date
Calcular distancia acumulada
Calcular a tarifa acumulada


Considere o modelo de dados:

create table cccat17.position (
position_id uuid,
ride_id uuid,
lat numeric,
long numeric,
date timestamp
);
